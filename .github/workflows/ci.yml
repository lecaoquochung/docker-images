name: CI

on:
  push:
    branches: [ "ci", "dev", "build*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  inspect-code:
    name: '[Required] Inspect code'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 2
      - name: Set up Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          cache: npm
          node-version-file: '.nvmrc'
      - name: Install dependencies
        run: npm ci
        env:
          TEST: true
      - name: Check code
        run: ls -all

  # OS 
  # Ubuntu
  build-ubuntu-latest:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: ubuntu-lastest
      run: docker build . --file ./ubuntu/Dockerfile.latest --tag ubuntu-latest:$(date +%s)
  
  # MacOS
  # https://github.com/actions/runner-images/blob/main/images/macos/macos-14-arm64-Readme.md
  build-macos-latest:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    - name: Build-in dependencies
      working-directory: ./swift
      run: |
        env
        ls -all
        sw_vers -productName
        sw_vers -productVersion
        sw_vers -buildVersion
        pip list
        npm ls
        swift --version
        swift package init --name HelloWorld --type executable
        ls HelloWorld
        cat HelloWorld/Package.swift
        cat HelloWorld/Sources/HelloWorld/main.swift
        cat HelloWorld/Tests/HelloWorldTests/HelloWorldTests.swift
    - name: Build
      working-directory: ./swift
      run: swift build -v
    - name: Run tests
      working-directory: ./swift
      run: swift test -v
  
  # Windows
  # https://github.com/actions/runner-images/blob/main/images/windows/Windows2022-Readme.md
  build-windows-latest:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - name: Build-in dependencies
      run: |
        env
        ls # no -all
        systeminfo | findstr /B /C:"OS Name" /B /C:"OS Version"
        systeminfo
        pnpm list
        packet show-installed-packages  
  
  # Ubuntu for QA
  build-ubuntu-qa:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: ubuntu-qa
      run: docker build . --file ./ubuntu/Dockerfile.qa --tag ubuntu-qa:$(date +%s)

  build-ubuntu-noble:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: ubuntu-noble
      run: docker build . --file ./ubuntu/Dockerfile.noble --tag ubuntu-noble:$(date +%s)
  
  # PROGRAMMING LANGUAGE
  # PHP
  build-php-latest:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: php-fpm
      run: docker build . --file ./php/Dockerfile.latest --tag php:$(date +%s)
  build-php-beta:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: php-fpm
      run: docker build . --file ./php/Dockerfile.beta --tag php:$(date +%s)

  # SCALA
  build-scala-bionic:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: scala-bionic
      run: docker build . --file ./scala/Dockerfile.bionic --tag scala-bionic:$(date +%s)
  build-scala-mantic:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: scala-mantic
      run: docker build . --file ./scala/Dockerfile.mantic --tag scala-mantic:$(date +%s)
  
  # APPLICATIONS
  # JENKINS
  build-jenkins-latest:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: jenkins-latest
      run: docker build . --file ./jenkins/Dockerfile.latest --tag jenkins-latest:$(date +%s)

  # PUPPETEER
  build-puppeteer-latest:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: puppeteer-latest
      run: docker build . --file ./puppeteer/Dockerfile.latest --tag "puppeteer-latest:$(date +%s)"

  # TEST
  # API TEST WITH POSTMAN
  # https://cloudy-shadow-800513.postman.co/workspace/lecaoquochung~885e6b40-0422-488c-8ab6-2f85ee3179ca/api/1512548b-2196-422a-8a3c-b8d374f227f9?action=share&creator=15804725&active-environment=15804725-addaf00d-1d92-4909-9256-0fa91ac840ac
  test-postman:
    needs: build-ubuntu-latest
    runs-on: ubuntu-latest
    environment: CI
    steps:
    - uses: actions/checkout@v4
    - name: ENV
      run: |
        env
    - name: Environment variables
      run: |
        echo "Github environment indirect : " "$CONTACT_VAR"
        echo "Github environment direct   : " ${{ vars.CONTACT }}
      env:
        CONTACT_VAR: ${{ vars.CONTACT }}
    - name: Install Postman CLI
      run: |
        curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
    - name: Login to Postman CLI
      run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}
    - name: Run API tests - Postman
      run: |
        postman collection run "15804725-1deca745-1604-4657-9f7e-353bdf2adac7" -e "15804725-addaf00d-1d92-4909-9256-0fa91ac840ac" --integration-id "168584-${{ github.run_id }}"

  # API TEST WITH NEWMAN
  # https://github.com/lecaoquochung/docker-images/issues/21
  # Test Commit
  # Config update
  test-newman:
    needs: build-ubuntu-latest
    runs-on: ubuntu-latest
    environment: CI
    steps:
    - uses: actions/checkout@v4
    - name: ENV
      run: |
        env
    - name: Environment variables
      run: |
        echo "Github environment indirect : " $CONTACT_VAR
        echo "Github environment direct   : " ${{ vars.CONTACT }}
      env:
        CONTACT_VAR: ${{ vars.CONTACT }}
    - name: Install Newman CLI
      run: |
        npm install -g newman
        npm update -g newman
        newman --version 
    - name: Run API tests - Newman - Collection Cloud (Shared JSON)
      run: |
        newman run https://api.postman.com/collections/15804725-2460c2a8-98d1-434d-9412-c7a0ab130f8e?access_key=${{ vars.POSTMAN_ACCESS_KEY_ME }} -e ./postman/SAMPLE.postman_environment.json
    - name: Run API tests - Newman - Collection JSON (Export)
      run: |
        newman run ./postman/ME.postman_collection.json -e ./postman/SAMPLE.postman_environment.json

  # REDASH SETUP
  test-redash-setup:
    needs: build-ubuntu-latest
    runs-on: ubuntu-latest
    environment: CI
    steps:
    - uses: actions/checkout@v4
    - name: ENV
      run: |
        env
    - name: Environment variables
      run: |
        echo "Github environment indirect : " $CONTACT_VAR
        echo "Github environment direct   : " ${{ vars.CONTACT }}
      env:
        CONTACT_VAR: ${{ vars.CONTACT }}
    - name: Checkout Redash setup
      uses: actions/checkout@master
      with:
        repository: getredash/setup
    - name: Dependencies
      run: |
        sudo apt-get update
        sudo apt install -y pwgen
        pwgen 32 1
    - name: Run setup.sh script
      run: |
        ls -all
        # cd setup
        sudo ./setup.sh startup
        sudo ./setup.sh

  # REDASH SETUP MACOS
  test-redash-setup-macos:
    needs: build-macos-latest
    runs-on: macos-latest
    environment: CI
    steps:
    - uses: actions/checkout@v4
    - name: ENV
      run: |
        env
    - name: Environment variables
      run: |
        echo "Github environment indirect : " $CONTACT_VAR
        echo "Github environment direct   : " ${{ vars.CONTACT }}
      env:
        CONTACT_VAR: ${{ vars.CONTACT }}
    - name: Checkout Redash setup
      uses: actions/checkout@master
      with:
        repository: getredash/setup
    - name: Dependencies
      run: |
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        brew install pwgen
        pwgen 32 1
    - name: Run setup.sh script
      run: |
        ls -all
        # cd setup
        sudo ./setup.sh startup
        sudo ./setup.sh 

  
  # TEST REDASH DOCKER
  test-redash-docker:
    needs: build-windows-latest
    runs-on: macos-latest
    environment: CI
    steps:
    - uses: actions/checkout@v4
    - name: ENV
      run: |
        env
    - name: Environment variables
      run: |
        echo "Github environment indirect : " $CONTACT_VAR
        echo "Github environment direct   : " ${{ vars.CONTACT }}
      env:
        CONTACT_VAR: ${{ vars.CONTACT }}
    - name: Run docker-compose up
      working-directory: ./redash
      run: |
        docker --version
        docker-compose --version
        docker-compose up -d
        docker-compose ps
        docker-compose logs
        