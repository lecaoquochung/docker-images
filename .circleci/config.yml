version: 2.1

# parameters only | params only
parameters:
  feature-domain:
    type: string
    default: "google.co.jp"

  tool:
    type: string
    default: "puppeteer"

  browser:
    type: string
    default: "chrome"

  env:
    type: string
    default: "dev"

  test_suite_name:
    type: string
    default: "basic_test"

  trigger_api:
    default: true
    type: boolean

  trigger_cli:
    default: true
    type: boolean

  trigger_implementation:
    default: true
    type: boolean

  trigger_linux:
    default: true
    type: boolean

  trigger_workflow_test_manual:
    default: true
    type: boolean

  os:
    type: string
    default: "linux"

orbs:
  win: circleci/windows@2.4.0
  macos: circleci/macos@2.3.4
  slack: circleci/slack@4.9.3
  browser-tools: circleci/browser-tools@1.4.1
  newman: postman/newman@1.0.0

working_directory: ~/code

jobs:
  test:
    docker:
      - image: ubuntu:latest
        environment:
          TZ: "Asia/Tokyo"
    steps:
      - checkout
      - run:
          name: Dependencies
          command: |
            # Install dependencies - Ubuntu latest fresh image
            cat /etc/os-release
      - restore_cache:
          keys:
          - v1-test-{{ checksum "package.json" }}
          - v1-test-
      - save_cache:
          key: v1-test-{{ checksum "package.json" }}
          paths:
            - node_modules

  # job test latest | job test-selenium
  test-selenium:
    environment:
      - ENV=<< pipeline.parameters.env >>
      - FEATURE_DOMAIN=<< pipeline.parameters.feature-domain >>
      - TEST_SUITE_NAME=<< pipeline.parameters.test_suite_name >>
      - TOOL=<< pipeline.parameters.tool >>
      - BROWSER=<< pipeline.parameters.browser >>
    parallelism: 2
    working_directory: /home/qa/code
    docker:
      - image: lecaoquochung/docker-images:puppeteer-v1.4.0
        environment:
          TZ: "Asia/Tokyo"
    steps:
      - checkout
      - run:
          name: Submodule
          command: |
            ./.circleci/submodule.sh
      - restore_cache:
          keys:
          - v1-build-latest-yarn-{{ checksum "package.json" }}
          - v1-build-latest-yarn-
      - run:
          name: Node version
          command: |
            node -v
            sudo n install stable
      - run:
          name: DOMAIN
          command: |
            ./.circleci/job/shared/server-domain-info.sh
      - run:
          name: Dependencies
          command: |
            ./.circleci/os/linux/dependencies.sh
      - run:
          name: Cucumber
          command: |
            yarn cucumber -v; pip --version; 
      - run:
          name: Jest
          command: |
            yarn test src/jest/openGoogle.test.js
      - run:
          name: Split test by Test suite
          command: |
            xargs -a ./features/testsuite/${TEST_SUITE_NAME}.txt -I {} circleci tests glob features/{} | circleci tests split --split-by=timings | xargs -I {} yarn feature -f json:coverage/feature/$TEST_SUITE_NAME.json {}
      - run:
          name: Selenium
          command: |
            TOOL=selenium yarn feature --tags "@selenium" -f json:coverage/feature/selenium.json
      - run:
          name: Report
          command: |
            ./.circleci/job/shared/report.sh
          when: always
      - run:
          name: Test artifacts
          command: |
            ./.circleci/job/shared/artifact.sh
          when: always
      - persist_to_workspace:
          root: .
          paths:
            - coverage
      - store_test_results:
          path: coverage/cucumber
          when: always
      - store_artifacts:
          path: artifact
          when: always

  test-puppeteer:
    environment:
      - ENV=<< pipeline.parameters.env >>
      - FEATURE_DOMAIN=<< pipeline.parameters.feature-domain >>
      - TEST_SUITE_NAME=<< pipeline.parameters.test_suite_name >>
      - TOOL=<< pipeline.parameters.tool >>
      - BROWSER=<< pipeline.parameters.browser >>
    parallelism: 2
    working_directory: /home/qa/code
    docker:
      - image: lecaoquochung/docker-images:puppeteer-v1.4.0
        environment:
          TZ: "Asia/Tokyo"
    steps:
      - checkout
      - run:
          name: Submodule
          command: |
            ./.circleci/submodule.sh
      - restore_cache:
          keys:
          - v1-build-version-yarn-{{ checksum "package.json" }}
          - vi-build-version-yarn-
      - run:
          name: DOMAIN
          command: |
            ./.circleci/job/shared/server-domain-info.sh
      - run:
          name: Dependencies
          command: |
            ./.circleci/os/linux/dependencies.sh
      - run:
          name: Jest
          command: |
            yarn test src/jest/openGoogle.test.js
      - run:
          name: Cucumber
          command: |
            yarn test src/jest/openGoogle.test.js
      - run:
          name: Split test by Test suite
          command: |
            xargs -a ./features/testsuite/${TEST_SUITE_NAME}.txt -I {} circleci tests glob features/{} | circleci tests split --split-by=timings | xargs -I {} yarn feature -f json:coverage/feature/$TEST_SUITE_NAME.json {}
      - run:
          name: Report
          command: |
            ./.circleci/job/shared/report.sh
          when: always
      - run:
          name: Test artifacts
          command: |
            ./.circleci/job/shared/artifact.sh
          when: always
      - persist_to_workspace:
          root: .
          paths:
            - coverage
      - store_test_results:
          path: coverage/cucumber
          when: always
      - store_artifacts:
          path: artifact
          when: always
      - run:
          name: Upload report to S3
          command: |
            ./.circleci/job/shared/aws-s3.sh
          when: always

  test-build:
    environment:
      - ENV=<< pipeline.parameters.env >>
      - FEATURE_DOMAIN=<< pipeline.parameters.feature-domain >>
      - TEST_SUITE_NAME=<< pipeline.parameters.test_suite_name >>
      - TOOL=<< pipeline.parameters.tool >>
      - BROWSER=<< pipeline.parameters.browser >>
    parallelism: 2
    working_directory: /home/qa/code
    docker:
      - image: lecaoquochung/docker-images:puppeteer-v1.1.0-build.1
        environment:
          TZ: "Asia/Tokyo"
    steps:
      - checkout
      - run:
          name: Submodule
          command: |
            ./.circleci/submodule.sh
      - run:
          name: DOMAIN
          command: |
            ./.circleci/job/shared/server-domain-info.sh
      - run:
          name: Dependencies
          command: |
            ./.circleci/os/linux/dependencies.sh
      - run:
          name: Jest
          command: |
            yarn test src/jest/openGoogle.test.js
      - run:
          name: Cucumber
          command: |
            yarn cucumber -v; pip --version;
      - run:
          name: Split test by Test suite
          command: |
            ./.circleci/job/shared/run-test.sh
      - run:
          name: Report
          command: |
            ./.circleci/job/shared/report.sh
          when: always
      - run:
          name: Test artifacts
          command: |
            ./.circleci/job/shared/artifact.sh
          when: always
      - persist_to_workspace:
          root: .
          paths:
            - coverage
      - store_test_results:
          path: coverage/cucumber
          when: always
      - store_artifacts:
          path: artifact
          when: always
      - run:
          name: Upload report to S3
          command: |
            ./.circleci/job/shared/aws-s3.sh
          when: always

  test-postman:
    executor: newman/postman-newman-docker
    steps:
      - checkout
      - newman/newman-run:
          collection: ./postman/ME.postman_collection.json
          environment: ./postman/SAMPLE.postman_environment.json

  # job test-ubuntu | job test-ubuntu-latest | job test ubuntu
  test-ubuntu:
    docker:
      - image: ghcr.io/lecaoquochung/docker-images:ubuntu-latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            whoami;pwd;ls -all;
            # npm ci /bin/bash: line 1: npm: command not found
      - run:
          name: List installed packages and versions
          command: |
            set -e # exit immediately if a command exits with a non-zero status
            # dpkg -l # running stop unexpectedly
            # apt-get -qq list --installed # E: Command line option --installed is not understood in combination with the other options
            apt list --installed
      - run:
          name: Version check
          command: |
            uname -a
            cat /etc/os-release
            # npm -v # /bin/bash: line 1: npm: command not found
            # node -v
  
  test-php:
    docker:
      - image: ghcr.io/lecaoquochung/docker-images:php-latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            whoami;pwd;ls -all; 
            # npm ci /bin/bash: line 1: npm: command not found
      - run:
          name: List installed packages and versions
          command: |
            set -e # exit immediately if a command exits with a non-zero status
            apt list --installed
      - run:
          name: Version check
          command: |
            uname -a
            cat /etc/os-release
            php -v
            php -r "phpinfo();"
            php --ini
            php --version

  test-redis:
    docker:
      - image: ghcr.io/lecaoquochung/docker-images:redis-latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            whoami;pwd;ls -all;
      - run:
          name: List installed packages and versions
          command: |
            set -e # exit immediately if a command exits with a non-zero status
            apt list --installed
      - run:
          name: Version check
          command: |
            uname -a
            cat /etc/os-release
            redis-server -v
            redis-cli -v
            locale
      - run:
          name: Start Redis server
          command: redis-server --daemonize yes
      - run:
          name: Redis functionality check
          command: |
            redis-cli ping
            redis-cli set test_key "Hello Redis"
            redis-cli get test_key
            redis-cli info

workflows:
  run-test:
    jobs:
      - test:
          filters:
            branches:
              only:
                - /(test|implementation).*/
                - main
      - test-selenium:
          requires:
            - test
      - test-puppeteer:
          requires:
            - test
      - test-build:
          requires:
            - test
      - test-postman:
          requires:
            - test
      - test-ubuntu:
          requires:
            - test
      - test-php:
          requires:
            - test
      - test-redis:
          requires:
            - test

  # For CircleCI API manual trigger only
  test_manual:
    unless: << pipeline.parameters.trigger_workflow_test_manual >>
    jobs:
      - test-build